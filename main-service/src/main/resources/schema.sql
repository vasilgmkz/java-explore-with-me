CREATE TABLE IF NOT EXISTS categories (
  category_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  category_name VARCHAR(255) NOT NULL,
  CONSTRAINT uq_categories_name UNIQUE (category_name)
);

CREATE TABLE IF NOT EXISTS users (
  user_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  user_name VARCHAR(255) NOT NULL,
  user_email VARCHAR(255) NOT NULL,
  CONSTRAINT uq_user_email UNIQUE (user_email)
);

CREATE TABLE IF NOT EXISTS events (
event_annotation text NOT NULL,
category_id BIGINT NOT NULL REFERENCES categories (category_id) ON DELETE RESTRICT,
event_created_on timestamp NOT NULL,
event_description text NOT NULL,
event_event_date timestamp NOT NULL,
event_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL,
user_id BIGINT NOT NULL REFERENCES users (user_id) ON DELETE CASCADE,
event_location_lat real NOT NULL,
event_location_lon real NOT NULL,
event_paid BOOL NOT NULL,
event_participant_limit BIGINT NOT NULL,
event_published_on timestamp,
event_request_moderation BOOL NOT NULL,
event_state VARCHAR(255) NOT NULL,
event_title VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS requests (
request_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
event_id BIGINT NOT NULL REFERENCES events (event_id) ON DELETE CASCADE,
user_id BIGINT NOT NULL REFERENCES users (user_id) ON DELETE CASCADE,
request_status VARCHAR(255) NOT NULL,
request_created timestamp NOT NULL,
CONSTRAINT "request_PK" PRIMARY KEY (user_id, event_id)
);

CREATE TABLE IF NOT EXISTS compilations (
compilation_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL,
compilation_pinned BOOL NOT NULL,
compilation_title VARCHAR(255) NOT NULL,
CONSTRAINT uq_compilation_title UNIQUE (compilation_title)
);

CREATE TABLE IF NOT EXISTS compilations_events (
compilation_id BIGINT NOT NULL REFERENCES compilations (compilation_id) ON DELETE CASCADE,
event_id BIGINT REFERENCES events (event_id) ON DELETE set NULL
);

CREATE TABLE IF NOT EXISTS locations (
  location_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  location_name VARCHAR(255) NOT NULL,
  location_lat real NOT NULL,
  location_lon real NOT NULL,
  location_radius real NOT NULL,
  location_created_on timestamp NOT NULL,
  CONSTRAINT uq_location_name UNIQUE (location_name)
);

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
declare
    dist float = 0;
    rad_lat1 float;
    rad_lat2 float;
    theta float;
    rad_theta float;
BEGIN
    IF lat1 = lat2 AND lon1 = lon2
    THEN
        RETURN dist;
    ELSE
        -- переводим градусы широты в радианы
        rad_lat1 = pi() * lat1 / 180;
        -- переводим градусы долготы в радианы
        rad_lat2 = pi() * lat2 / 180;
        -- находим разность долгот
        theta = lon1 - lon2;
        -- переводим градусы в радианы
        rad_theta = pi() * theta / 180;
        -- находим длину ортодромии
        dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

        IF dist > 1
            THEN dist = 1;
        END IF;

        dist = acos(dist);
        -- переводим радианы в градусы
        dist = dist * 180 / pi();
        -- переводим градусы в километры
        dist = dist * 60 * 1.8524;

        RETURN dist;
    END IF;
END;
'
LANGUAGE PLPGSQL;